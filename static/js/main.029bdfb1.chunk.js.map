{"version":3,"sources":["components/LocationButton.tsx","components/LocationInput.tsx","components/LeftPane.tsx","components/WeatherForecast.tsx","components/App.tsx","reportWebVitals.ts","index.tsx"],"names":["LocationButton","successCallback","position","console","log","coords","latitude","longitude","navigator","geolocation","size","className","shape","icon","AimOutlined","onClick","getCurrentPosition","LocationInput","props","setLocation","useState","value","setValue","selectProps","placeholder","noOptionsMessage","components","IndicatorSeparator","DropdownIndicator","styles","style","input","provided","width","classNamePrefix","onSelect","event","a","geocodeByPlaceId","place_id","then","results","getLatLng","lat","lng","terms","apiKey","process","debounce","LeftPane","location","WeatherForecast","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qZA8BeA,EAzBQ,WACrB,SAASC,EAAgBC,GACvBC,QAAQC,IAAIF,EAASG,OAAOC,UAC5BH,QAAQC,IAAIF,EAASG,OAAOE,WAO9B,OACEC,UAAUC,YAEN,cAAC,IAAD,CACEC,KAAK,SACLC,UAAU,eACVC,MAAM,SACNC,KAAM,cAACC,EAAA,EAAD,IACNC,QAZY,WAClBP,UAAUC,YAAYO,mBAAmBf,MAcrC,MC4BOgB,EA9CO,SAACC,GAAgB,IAC7BC,EAAgBD,EAAhBC,YAD4B,EAEVC,qBAFU,mBAE7BC,EAF6B,KAEtBC,EAFsB,KAkB9BC,EAAc,CAClBC,YAAa,WACbC,iBAAkB,iBAAM,oBACxBC,WAAY,CACVC,mBAAoB,kBAAM,MAC1BC,kBAAmB,kBAAM,OAE3BC,OAAQ,CAAEC,MAbE,CACZC,MAAO,SAACC,GAAD,mBAAC,eACHA,GADE,IAELC,MAAO,WAWTtB,UAAW,wBACXuB,gBAAiB,wBACjBb,QACAc,SAzBkB,uCAAG,WAAOC,GAAP,SAAAC,EAAA,6DACrBlC,QAAQC,IAAIgC,GADS,SAEfE,YAAiBF,EAAMf,MAAMkB,UAChCC,MAAK,SAACC,GAAD,OAAaC,YAAUD,EAAQ,OACpCD,MAAK,gBAAGG,EAAH,EAAGA,IAAKC,EAAR,EAAQA,IAAR,OAAkBzB,EAAY,CAAEwB,MAAKC,WAJxB,OAKrBtB,EAASc,EAAMf,MAAMwB,MAAM,GAAGxB,OALT,2CAAH,uDA4BpB,OACE,sBAAKV,UAAU,qBAAf,UACE,cAAC,IAAD,CACEmC,OAAQC,0CACRC,SAAU,KACVzB,YAAW,eACNA,KAGP,cAAC,EAAD,QCnCS0B,G,MAVE,SAAC/B,GACkBA,EAA1BgC,SADwB,IACd/B,EAAgBD,EAAhBC,YAElB,OACE,qBAAKR,UAAU,sBAAf,SACE,cAAC,EAAD,CAAeQ,YAAaA,QCKnBgC,G,MAVS,WAAO,IAAD,EACI/B,mBAAS,IADb,mBACrB8B,EADqB,KACX/B,EADW,KAG5B,OACE,qBAAKR,UAAU,6BAAf,SACE,cAAC,EAAD,CAAUuC,SAAUA,EAAU/B,YAAaA,QCGlCiC,MARf,WACE,OACE,qBAAKzC,UAAU,gBAAf,SACE,cAAC,EAAD,OCSS0C,EAdS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBf,MAAK,YAEnB,IADLgB,EACI,EADJA,OAAQC,EACJ,EADIA,OAAQC,EACZ,EADYA,OAAQC,EACpB,EADoBA,OAAQC,EAC5B,EAD4BA,QAEhCJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCLdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.029bdfb1.chunk.js","sourcesContent":["import React from 'react';\nimport './styles/LocationButton.scss';\nimport { Button } from 'antd';\nimport { AimOutlined } from '@ant-design/icons';\n\nconst LocationButton = () => {\n  function successCallback(position: any) {\n    console.log(position.coords.latitude); // 43.2132209\n    console.log(position.coords.longitude); // 27.9571503\n  }\n\n  const getLocation = () => {\n    navigator.geolocation.getCurrentPosition(successCallback);\n  };\n\n  return (\n    navigator.geolocation\n      ? (\n        <Button\n          size=\"middle\"\n          className=\"location-btn\"\n          shape=\"circle\"\n          icon={<AimOutlined />}\n          onClick={getLocation}\n        />\n      )\n      : null\n  );\n};\n\nexport default LocationButton;\n","import React, { useState } from 'react';\nimport GooglePlacesAutocomplete, {\n  geocodeByPlaceId,\n  getLatLng,\n} from 'react-google-places-autocomplete';\nimport './styles/LocationInput.scss';\nimport LocationButton from './LocationButton';\n\nconst LocationInput = (props: any) => {\n  const { setLocation } = props;\n  const [value, setValue] = useState();\n\n  const handleLocation = async (event: any) => {\n    console.log(event);\n    await geocodeByPlaceId(event.value.place_id)\n      .then((results) => getLatLng(results[0]))\n      .then(({ lat, lng }) => setLocation({ lat, lng }));\n    setValue(event.value.terms[0].value);\n  };\n\n  const style = {\n    input: (provided: any) => ({\n      ...provided,\n      width: '75%',\n    }),\n  };\n  const selectProps = {\n    placeholder: 'Location',\n    noOptionsMessage: () => 'No Results Found',\n    components: {\n      IndicatorSeparator: () => null,\n      DropdownIndicator: () => null,\n    },\n    styles: { style },\n    className: 'location-select-input',\n    classNamePrefix: 'location-select-input',\n    value,\n    onSelect: handleLocation,\n  };\n\n  return (\n    <div className=\"location-container\">\n      <GooglePlacesAutocomplete\n        apiKey={process.env.REACT_APP_GOOGLE_API_KEY}\n        debounce={1500}\n        selectProps={{\n          ...selectProps,\n        }}\n      />\n      <LocationButton />\n    </div>\n  );\n};\n\nexport default LocationInput;\n","import React from 'react';\nimport LocationInput from './LocationInput';\nimport './styles/LeftPane.scss';\n\nconst LeftPane = (props: any) => {\n  const { location, setLocation } = props;\n\n  return (\n    <div className=\"left-pane-container\">\n      <LocationInput setLocation={setLocation} />\n    </div>\n  );\n};\n\nexport default LeftPane;\n","import React, { useState } from 'react';\nimport LeftPane from './LeftPane';\nimport './styles/WeatherForecast.scss';\n\nconst WeatherForecast = () => {\n  const [location, setLocation] = useState({});\n\n  return (\n    <div className=\"weather-forecast-container\">\n      <LeftPane location={location} setLocation={setLocation} />\n    </div>\n  );\n};\n\nexport default WeatherForecast;\n","import React from 'react';\nimport './styles/App.scss';\nimport WeatherForecast from './WeatherForecast';\n\nfunction App() {\n  return (\n    <div className=\"app-container\">\n      <WeatherForecast />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}