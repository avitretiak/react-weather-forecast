{"version":3,"sources":["components/styles/_colors.module.scss","components/LocationButton.tsx","components/LocationInput.tsx","components/WeatherIcon.tsx","components/HumidityDisplay.tsx","components/WindDisplay.tsx","components/DateTimeDisplay.tsx","components/WeatherCardBig.tsx","components/LeftPane.tsx","components/WeatherChart.tsx","components/WeatherCardSmall.tsx","components/RightPane.tsx","components/WeatherForecast.tsx","components/AppContainer.tsx","index.tsx"],"names":["module","exports","LocationButton","setLocation","setValue","successCallback","position","a","coords","latitude","longitude","lat","lng","geocodeByLatLng","then","results","filter","result","types","filteredResults","formatted_address","split","splitName","navigator","geolocation","size","className","shape","icon","AimOutlined","onClick","getCurrentPosition","LocationInput","useState","value","handleLocation","event","geocodeByPlaceId","place_id","getLatLng","text","terms","selectProps","openMenuOnClick","placeholder","noOptionsMessage","components","IndicatorSeparator","DropdownIndicator","styles","style","input","provided","width","classNamePrefix","label","onSelect","onChange","apiKey","process","debounce","WeatherIcon","iconId","iconClass","weatherClass","HumidityDisplay","humidityPercentage","WindDisplay","windSpeed","toFixed","DateTimeDisplay","secondsOffset","dayjs","extend","utc","dateTime","setDateTime","useEffect","interval","setInterval","clearInterval","dateTimeText","utcOffset","format","WeatherCardBig","weather","timezoneOffset","temp","main","humidity","wind_speed","LeftPane","currentWeather","chartStyle","borderCapStyle","borderColor","colors","fillBlue","borderWidth","tension","hoverBorderWidth","hoverRadius","hoverBorderColor","white","pointBorderWidth","pointBackgroundColor","hoverBackgroundColor","WeatherChart","temperatures","selectedDay","chartRef","useRef","tooltipPlugin","Chart","registry","getPlugin","positioners","top","items","pos","average","currentItemValue","element","$context","raw","x","y","Math","max","min","data","labels","datasets","fill","target","above","areaBlue","below","options","events","scales","display","ticks","plugins","legend","tooltip","backgroundColor","displayColors","bodyFontSize","bodyColor","bodyFont","weight","family","callbacks","title","context","dataIndex","elementNumber","getSelectionOffset","dayOffset","current","setActiveElements","datasetIndex","index","update","highlightElement","ref","height","WeatherCardSmall","forecast","handleClick","type","add","RightPane","dailyWeather","setSelectedDay","nextFourDays","slice","map","day","dailyTemperature","morn","eve","night","kelvin","flat","handleCardClick","cardNumber","i","WeatherForecast","location","apiData","setApiData","apiUrl","toPrecision","loadWeather","fetch","response","json","timezone_offset","daily","AppContainer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5653d131.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"fillBlue\":\"#5596f6\",\"areaBlue\":\"#eef4fe\",\"white\":\"#fff\"};","import React from 'react';\nimport { Button } from 'antd';\nimport { AimOutlined } from '@ant-design/icons';\nimport { geocodeByLatLng } from 'react-google-places-autocomplete';\n\nconst LocationButton = ({ setLocation, setValue }: any) => {\n  async function successCallback(position: any) {\n    const [lat, lng] = [position.coords.latitude, position.coords.longitude];\n    await geocodeByLatLng({ lat, lng })\n      .then((results) => results.filter((result) => result.types[0] === 'postal_code'))\n      .then((filteredResults) => filteredResults[0].formatted_address.split(', '))\n      .then((splitName) => `${splitName[0]}, ${splitName[1]}`);\n    setLocation({ lat, lng });\n    setValue('Current Location');\n  }\n\n  const getLocation = () => {\n    navigator.geolocation.getCurrentPosition(successCallback);\n  };\n\n  return navigator.geolocation ? (\n    <Button\n      size=\"middle\"\n      className=\"location-btn\"\n      shape=\"circle\"\n      icon={<AimOutlined />}\n      onClick={getLocation}\n    />\n  ) : null;\n};\n\nexport default LocationButton;\n","import React, { useState } from 'react';\nimport GooglePlacesAutocomplete, {\n  geocodeByPlaceId,\n  getLatLng,\n} from 'react-google-places-autocomplete';\nimport './styles/LocationInput.scss';\nimport LocationButton from './LocationButton';\n\nconst LocationInput = ({ setLocation }: any) => {\n  const [value, setValue] = useState('Location');\n\n  const handleLocation = async (event: any) => {\n    await geocodeByPlaceId(event.value.place_id)\n      .then((results) => getLatLng(results[0]))\n      .then(({ lat, lng }) => setLocation({ lat, lng }));\n\n    const text = event.value.terms[1]\n      ? `${event.value.terms[0].value}, ${event.value.terms[1].value}`\n      : `${event.value.terms[0].value}`;\n    setValue(text);\n  };\n\n  const style = {\n    input: (provided: any) => ({\n      ...provided,\n      width: '75%',\n    }),\n  };\n  const selectProps = {\n    openMenuOnClick: false,\n    placeholder: value,\n    noOptionsMessage: () => 'No Results Found',\n    components: {\n      IndicatorSeparator: () => null,\n      DropdownIndicator: () => null,\n    },\n    styles: { style },\n    className: 'location-select-input',\n    classNamePrefix: 'location-select-input',\n    label: value,\n    value,\n    onSelect: handleLocation,\n    onChange: handleLocation,\n  };\n\n  return (\n    <div className=\"location-input-container\">\n      <GooglePlacesAutocomplete\n        apiKey={process.env.REACT_APP_GOOGLE_API_KEY}\n        debounce={1500}\n        selectProps={{\n          ...selectProps,\n        }}\n      />\n      <LocationButton setValue={setValue} setLocation={setLocation} />\n    </div>\n  );\n};\n\nexport default LocationInput;\n","import React from 'react';\nimport './styles/_icons.scss';\n\nconst WeatherIcon = ({ iconId, iconClass }: any) => {\n  const weatherClass = `block owi owi-${iconId} ${iconClass}`;\n\n  return <i className={weatherClass} />;\n};\n\nexport default WeatherIcon;\n","import React from 'react';\n\nconst HumidityDisplay = ({ humidityPercentage }: any) => (\n  <div className=\"humidity-container\">\n    <span className=\"humidity-text\">Humidity</span>\n    <br />\n    <span className=\"humidity-percentage\">{`${humidityPercentage}%`}</span>\n  </div>\n);\n\nexport default HumidityDisplay;\n","import React from 'react';\n\nconst WindDisplay = ({ windSpeed }: any) => (\n  <div className=\"windspeed-container\">\n    <span className=\"windspeed-text\">Wind Speed</span>\n    <br />\n    <span className=\"windspeed-value\">{`${windSpeed.toFixed(1)} km/h`}</span>\n  </div>\n);\n\nexport default WindDisplay;\n","import React, { useEffect, useState } from 'react';\nimport dayjs from 'dayjs';\nimport utc from 'dayjs/plugin/utc';\n\nconst DateTimeDisplay = ({ secondsOffset }: any) => {\n  dayjs.extend(utc);\n  const [dateTime, setDateTime] = useState(dayjs.utc());\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setDateTime(dayjs.utc());\n    }, 1000);\n    return () => clearInterval(interval);\n  }, [secondsOffset]);\n\n  const dateTimeText = `${dateTime\n    .utcOffset(secondsOffset / 60)\n    .format('hh:mm a, dddd, MMM DD, YYYY')}`;\n\n  return <span className=\"date-time-text\">{dateTimeText}</span>;\n};\n\nexport default DateTimeDisplay;\n","import React from 'react';\nimport WeatherIcon from './WeatherIcon';\nimport HumidityDisplay from './HumidityDisplay';\nimport WindDisplay from './WindDisplay';\nimport DateTimeDisplay from './DateTimeDisplay';\nimport './styles/WeatherCardBig.scss';\n\nconst WeatherCardBig = ({ weather, timezoneOffset }: any) => (\n  <div className=\"weather-card-big\">\n    <DateTimeDisplay className=\"date-time-container\" secondsOffset={timezoneOffset} />\n    <div className=\"weather-card-big-current\">\n      <WeatherIcon iconClass=\"wi-main\" iconId={weather.weather[0].icon} />\n      <span className=\"temp-display\">{`${(weather.temp - 273.15).toFixed(1)}°c`}</span>\n    </div>\n    <span className=\"weather-card-big-current-text\">{weather.weather[0].main}</span>\n    <div className=\"weather-card-big-lower\">\n      <HumidityDisplay humidityPercentage={weather.humidity} />\n      <WindDisplay windSpeed={weather.wind_speed * 3.6} />\n    </div>\n  </div>\n);\n\nexport default WeatherCardBig;\n","import React from 'react';\nimport LocationInput from './LocationInput';\nimport WeatherCardBig from './WeatherCardBig';\n\nconst LeftPane = ({ setLocation, currentWeather, timezoneOffset }: any) => (\n  <div className=\"left-pane-container\">\n    <LocationInput setLocation={setLocation} />\n    {currentWeather ? (\n      <>\n        <WeatherCardBig weather={currentWeather} timezoneOffset={timezoneOffset} />\n      </>\n    ) : (\n      ''\n    )}\n  </div>\n);\n\nexport default LeftPane;\n","import React, { useEffect, useRef } from 'react';\nimport { Line, Chart } from 'react-chartjs-2';\nimport colors from './styles/_colors.module.scss';\nimport './styles/WeatherChart.scss';\n\nconst chartStyle = {\n  borderCapStyle: 'round',\n  borderColor: colors.fillBlue,\n  borderWidth: 2,\n  tension: 0.4,\n  hoverBorderWidth: 3,\n  hoverRadius: 6,\n  hoverBorderColor: colors.white,\n  pointBorderWidth: 0,\n  pointBackgroundColor: 'rgba(0, 0, 0, 0)',\n  hoverBackgroundColor: colors.fillBlue,\n};\n\nconst chartHeight = 120;\n\nconst WeatherChart = ({ temperatures, selectedDay }: any) => {\n  const chartRef = useRef<any>(null);\n\n  const tooltipPlugin = Chart.registry.getPlugin('tooltip') as any;\n  tooltipPlugin.positioners.top = (items: any) => {\n    const pos = tooltipPlugin.positioners.average(items);\n    const currentItemValue = items[0].element.$context.raw;\n\n    if (pos === false) {\n      return false;\n    }\n\n    return {\n      x: pos.x < 25 ? pos.x + 10 : pos.x,\n      y:\n        currentItemValue > 0\n          ? pos.y - 4 * Math.max(...temperatures)\n          : pos.y + 20 - 3 * Math.min(...temperatures),\n    };\n  };\n  const data = {\n    labels: [\n      'day1Morn',\n      'day1Day',\n      'day1Eve',\n      'day1Night',\n      'day2Morn',\n      'day2Day',\n      'day2Eve',\n      'day2Night',\n      'day3Morn',\n      'day3Day',\n      'day3Eve',\n      'day3Night',\n      'day4Morn',\n      'day4Day',\n      'day4Eve',\n      'day4Night',\n    ],\n    datasets: [\n      {\n        data: temperatures,\n        fill: {\n          target: 'origin',\n          above: colors.areaBlue,\n          below: colors.areaBlue,\n        },\n      },\n    ],\n  };\n\n  const options = {\n    ...chartStyle,\n    events: [],\n    scales: {\n      y: {\n        display: false,\n        ticks: {\n          display: false,\n        },\n        min: temperatures ? Math.min(...temperatures) - 7.5 : 0,\n        max: temperatures ? Math.max(...temperatures) + 7.5 : 50,\n      },\n      x: {\n        ticks: {\n          display: false,\n        },\n        display: false,\n      },\n    },\n    plugins: {\n      legend: {\n        display: false,\n      },\n      tooltip: {\n        position: 'top' as 'average',\n        backgroundColor: 'transparent',\n        displayColors: false,\n        bodyFontSize: 32,\n        bodyColor: colors.fillBlue,\n        bodyFont: {\n          weight: 'bold',\n          size: 22,\n          family: 'Open Sans, sans-serif',\n        },\n        callbacks: {\n          title: () => '',\n          label(context: any) {\n            return `${temperatures[context.dataIndex].toFixed(1)}˚c`;\n          },\n        },\n      },\n    },\n  };\n\n  const highlightElement = (elementNumber: number) => {\n    const getSelectionOffset = (dayOffset: number) => 1 + 4 * dayOffset;\n    if (chartRef && chartRef.current && temperatures) {\n      chartRef.current.setActiveElements([\n        { datasetIndex: 0, index: getSelectionOffset(elementNumber) },\n      ]);\n      chartRef.current.tooltip.setActiveElements([\n        { datasetIndex: 0, index: getSelectionOffset(elementNumber) },\n      ]);\n      chartRef.current.tooltip.update();\n    }\n  };\n  useEffect(() => {\n    highlightElement(selectedDay);\n  }, [selectedDay, temperatures]);\n\n  return (\n    <div className=\"weather-chart-container\">\n      {temperatures ? (\n        <div className=\"weather-chart-container\">\n          <p className=\"temperature-chart-title\">Daily Average</p>\n          <Line\n            data={data}\n            ref={chartRef}\n            options={options}\n            height={`${chartHeight}px`}\n            className=\"weather-chart\"\n          />\n        </div>\n      ) : null}\n    </div>\n  );\n};\n\nexport default WeatherChart;\n","import React from 'react';\nimport dayjs from 'dayjs';\nimport WeatherIcon from './WeatherIcon';\nimport HumidityDisplay from './HumidityDisplay';\nimport './styles/WeatherCardSmall.scss';\n\nconst WeatherCardSmall = ({\n  forecast, dayOffset, handleClick, selectedDay,\n}: any) => {\n  const className = `weather-card-small inline-block ${\n    dayOffset === selectedDay ? 'selected' : ''\n  }`;\n  return (\n    <button type=\"button\" className={className} onClick={() => handleClick(dayOffset)}>\n      <span className=\"block weather-card-small-day\">\n        {dayOffset === 0 ? 'Today' : `${dayjs().add(dayOffset, 'day').format('MMM DD')}`}\n      </span>\n      <WeatherIcon iconId={forecast.weather[0].icon} />\n      <HumidityDisplay humidityPercentage={forecast.humidity} />\n    </button>\n  );\n};\n\nexport default WeatherCardSmall;\n","import React, { useState } from 'react';\nimport WeatherChart from './WeatherChart';\nimport WeatherCardSmall from './WeatherCardSmall';\n\nconst flattenDailyTemperature = (dailyTemperature: any) => [\n  dailyTemperature.temp.morn,\n  dailyTemperature.temp.day,\n  dailyTemperature.temp.eve,\n  dailyTemperature.temp.night,\n].map((kelvin) => kelvin - 273.15);\n\nconst RightPane = ({ dailyWeather }: any) => {\n  const [selectedDay, setSelectedDay] = useState(0);\n  const nextFourDays = dailyWeather?.slice(0, 4);\n  const temperatures = nextFourDays?.map((day: any) => flattenDailyTemperature(day))?.flat();\n\n  const handleCardClick = (cardNumber: number) => {\n    setSelectedDay(cardNumber);\n  };\n  return (\n    <div className=\"right-pane-container\">\n      <WeatherChart temperatures={temperatures} selectedDay={selectedDay} />\n      <div className=\"small-cards-container\">\n        {nextFourDays?.map((forecast: any, i: number) => (\n          <WeatherCardSmall\n            forecast={forecast}\n            // eslint-disable-next-line react/no-array-index-key\n            key={`daySelector${i}`}\n            dayOffset={i}\n            selectedDay={selectedDay}\n            handleClick={handleCardClick}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default RightPane;\n","import React, { useState, useEffect } from 'react';\nimport LeftPane from './LeftPane';\nimport RightPane from './RightPane';\nimport './styles/WeatherForecast.scss';\n\nconst WeatherForecast = () => {\n  const [location, setLocation] = useState({ lat: 0.0, lng: 0.0 });\n  const [apiData, setApiData] = useState<any>();\n  const apiUrl = `https://api.openweathermap.org/data/2.5/onecall?lat=${location.lat.toPrecision(\n    4,\n  )}&lon=${location.lng.toPrecision(4)}&exclude=minutely,hourly,alerts&appid=${\n    process.env.REACT_APP_WEATHER_API_KEY\n  }`;\n  const loadWeather = async () => {\n    if (location.lat || location.lng) {\n      await fetch(apiUrl)\n        .then((response) => response.json())\n        .then((json) => setApiData(json));\n    }\n  };\n  useEffect(() => {\n    loadWeather();\n  }, [apiUrl]);\n\n  return (\n    <div className=\"container\">\n      <LeftPane\n        currentWeather={apiData?.current}\n        timezoneOffset={apiData?.timezone_offset}\n        location={location}\n        setLocation={setLocation}\n      />\n      <RightPane dailyWeather={apiData?.daily} />\n    </div>\n  );\n};\n\nexport default WeatherForecast;\n","import React from 'react';\nimport './styles/AppContainer.scss';\nimport WeatherForecast from './WeatherForecast';\n\nconst AppContainer = () => (\n  <div className=\"app-container\">\n    <WeatherForecast />\n  </div>\n);\n\nexport default AppContainer;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport AppContainer from './components/AppContainer';\n\nReactDOM.render(\n  <React.StrictMode>\n    <AppContainer />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}