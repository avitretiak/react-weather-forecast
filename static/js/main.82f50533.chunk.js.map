{"version":3,"sources":["components/LocationButton.tsx","components/LocationInput.tsx","components/LeftPane.tsx","components/WeatherForecast.tsx","components/App.tsx","reportWebVitals.ts","index.tsx"],"names":["LocationButton","size","className","shape","icon","AimOutlined","LocationInput","style","input","provided","width","Group","apiKey","process","debounce","selectProps","placeholder","noOptionsMessage","components","IndicatorSeparator","DropdownIndicator","styles","classNamePrefix","LeftPane","WeatherForecast","useState","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sYAceA,EATQ,kBACrB,cAAC,IAAD,CACEC,KAAK,SACLC,UAAU,eACVC,MAAM,SACNC,KAAM,cAACC,EAAA,EAAD,OCgCKC,EApCO,WAIpB,IAIMC,EAAQ,CACZC,MAAO,SAACC,GAAD,mBAAC,eACHA,GADE,IAELC,MAAO,UAIX,OACE,eAAC,IAAMC,MAAP,WACE,cAAC,IAAD,CACEC,OAAQC,0CACRC,SAAU,KACVC,YAAW,2BAhBG,CAClBC,YAAa,WACbC,iBAAkB,iBAAM,sBAcT,IAETC,WAAY,CACVC,mBAAoB,kBAAM,MAC1BC,kBAAmB,kBAAM,OAE3BC,OAAQ,CAAEd,SACVL,UAAW,wBACXoB,gBAAiB,4BAGrB,cAAC,EAAD,QC3BSC,G,MANE,kBACf,qBAAKrB,UAAU,sBAAf,SACE,cAAC,EAAD,QCSWsB,G,MAXS,WAAO,IAAD,EACFC,mBAAS,IADP,gCAEIA,mBAAS,KAFb,6BAI5B,OACE,qBAAKvB,UAAU,6BAAf,SACE,cAAC,EAAD,QCESwB,MARf,WACE,OACE,qBAAKxB,UAAU,gBAAf,SACE,cAAC,EAAD,OCSSyB,EAdS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAEnB,IADLC,EACI,EADJA,OAAQC,EACJ,EADIA,OAAQC,EACZ,EADYA,OAAQC,EACpB,EADoBA,OAAQC,EAC5B,EAD4BA,QAEhCJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCLdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.82f50533.chunk.js","sourcesContent":["import React from 'react';\nimport './styles/LocationButton.scss';\nimport { Button } from 'antd';\nimport { AimOutlined } from '@ant-design/icons';\n\nconst LocationButton = () => (\n  <Button\n    size=\"middle\"\n    className=\"location-btn\"\n    shape=\"circle\"\n    icon={<AimOutlined />}\n  />\n);\n\nexport default LocationButton;\n","import React from 'react';\nimport GooglePlacesAutocomplete from 'react-google-places-autocomplete';\nimport './styles/LocationInput.scss';\nimport { Input } from 'antd';\nimport LocationButton from './LocationButton';\n\nconst LocationInput = () => {\n  // const [value, setValue] = useState('');\n  // const [location, setLocation] = useState('');\n\n  const selectProps = {\n    placeholder: 'Location',\n    noOptionsMessage: () => 'No Results Found',\n  };\n  const style = {\n    input: (provided: any) => ({\n      ...provided,\n      width: '75%',\n    }),\n  };\n\n  return (\n    <Input.Group>\n      <GooglePlacesAutocomplete\n        apiKey={process.env.REACT_APP_GOOGLE_API_KEY}\n        debounce={1500}\n        selectProps={{\n          ...selectProps,\n          components: {\n            IndicatorSeparator: () => null,\n            DropdownIndicator: () => null,\n          },\n          styles: { style },\n          className: 'location-select-input',\n          classNamePrefix: 'location-select-input',\n        }}\n      />\n      <LocationButton />\n    </Input.Group>\n  );\n};\n\nexport default LocationInput;\n","import React from 'react';\nimport LocationInput from './LocationInput';\nimport './styles/LeftPane.scss';\n\nconst LeftPane = () => (\n  <div className=\"left-pane-container\">\n    <LocationInput />\n  </div>\n);\n\nexport default LeftPane;\n","import React, { useState } from 'react';\nimport LeftPane from './LeftPane';\nimport './styles/WeatherForecast.scss';\n\nconst WeatherForecast = () => {\n  const [value, setValue] = useState('');\n  const [location, setLocation] = useState('');\n\n  return (\n    <div className=\"weather-forecast-container\">\n      <LeftPane />\n    </div>\n  );\n};\n\nexport default WeatherForecast;\n","import React from 'react';\nimport './styles/App.scss';\nimport WeatherForecast from './WeatherForecast';\n\nfunction App() {\n  return (\n    <div className=\"app-container\">\n      <WeatherForecast />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}