{"version":3,"sources":["components/WeatherIcon.tsx","components/LocationButton.tsx","components/LocationInput.tsx","components/LeftPane.tsx","components/WeatherForecast.tsx","components/App.tsx","reportWebVitals.ts","index.tsx"],"names":["WeatherIcon","props","iconId","weatherClass","className","LocationButton","setLocation","setValue","successCallback","position","a","coords","latitude","longitude","lat","lng","geocodeByLatLng","then","results","filter","result","types","filteredResults","formatted_address","split","splitName","navigator","geolocation","size","shape","icon","AimOutlined","onClick","getCurrentPosition","LocationInput","useState","value","handleLocation","event","console","log","geocodeByPlaceId","place_id","getLatLng","text","terms","selectProps","placeholder","noOptionsMessage","components","IndicatorSeparator","DropdownIndicator","styles","style","input","provided","width","classNamePrefix","label","onSelect","onChange","apiKey","process","debounce","LeftPane","location","apiData","message","weather","main","name","WeatherForecast","setApiData","apiUrl","toPrecision","loadWeather","fetch","response","ok","statusText","json","catch","error","useEffect","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.95f00855.chunk.js","sourcesContent":["import React from 'react';\nimport './styles/WeatherIcons.scss';\n\nconst WeatherIcon = (props: any) => {\n  const { iconId } = props;\n  const weatherClass = `owi owi-${iconId}`;\n\n  return (\n    <>\n      <span className={weatherClass} />\n    </>\n  );\n};\n\nexport default WeatherIcon;\n","import React from 'react';\nimport './styles/LocationButton.scss';\nimport { Button } from 'antd';\nimport { AimOutlined } from '@ant-design/icons';\nimport {\n  geocodeByLatLng,\n} from 'react-google-places-autocomplete';\n\nconst LocationButton = (props: any) => {\n  const { setLocation, setValue } = props;\n  async function successCallback(position: any) {\n    const [lat, lng] = [position.coords.latitude, position.coords.longitude];\n    const locationResult = await geocodeByLatLng(\n      { lat, lng },\n    )\n      .then((results) => results.filter((result) => result.types[0] === 'postal_code'))\n      .then((filteredResults) => filteredResults[0].formatted_address.split(', '))\n      .then((splitName) => `${splitName[0]}, ${splitName[1]}`);\n    setLocation({ lat, lng });\n    setValue('Current Location');\n  }\n\n  const getLocation = () => {\n    navigator.geolocation.getCurrentPosition(successCallback);\n  };\n\n  return (\n    navigator.geolocation\n      ? (\n        <Button\n          size=\"middle\"\n          className=\"location-btn\"\n          shape=\"circle\"\n          icon={<AimOutlined />}\n          onClick={getLocation}\n        />\n      )\n      : null\n  );\n};\n\nexport default LocationButton;\n","import React, { useState } from 'react';\nimport GooglePlacesAutocomplete, {\n  geocodeByPlaceId,\n  getLatLng,\n} from 'react-google-places-autocomplete';\nimport './styles/LocationInput.scss';\nimport LocationButton from './LocationButton';\n\nconst LocationInput = (props: any) => {\n  const { setLocation } = props;\n  const [value, setValue] = useState('Location');\n\n  const handleLocation = async (event: any) => {\n    console.log(event);\n    await geocodeByPlaceId(event.value.place_id)\n      .then((results) => getLatLng(results[0]))\n      .then(({ lat, lng }) => setLocation({ lat, lng }));\n\n    const text = event.value.terms[1]\n      ? `${event.value.terms[0].value}, ${event.value.terms[1].value}`\n      : `${event.value.terms[0].value}`;\n    setValue(text);\n  };\n\n  const style = {\n    input: (provided: any) => ({\n      ...provided,\n      width: '75%',\n    }),\n  };\n  const selectProps = {\n    placeholder: value,\n    noOptionsMessage: () => 'No Results Found',\n    components: {\n      IndicatorSeparator: () => null,\n      DropdownIndicator: () => null,\n    },\n    styles: { style },\n    className: 'location-select-input',\n    classNamePrefix: 'location-select-input',\n    label: value,\n    value,\n    onSelect: handleLocation,\n    onChange: handleLocation,\n  };\n\n  return (\n    <div className=\"location-container\">\n      <GooglePlacesAutocomplete\n        apiKey={process.env.REACT_APP_GOOGLE_API_KEY}\n        debounce={1500}\n        selectProps={{\n          ...selectProps,\n        }}\n      />\n      <LocationButton setValue={setValue} setLocation={setLocation} />\n    </div>\n  );\n};\n\nexport default LocationInput;\n","import React from 'react';\nimport WeatherIcon from './WeatherIcon';\nimport LocationInput from './LocationInput';\nimport './styles/LeftPane.scss';\n\nconst LeftPane = (props: any) => {\n  const {\n    location, setLocation, apiData,\n  } = props;\n  const message = `It is currently ${apiData?.weather[0].main} in ${apiData?.name}`;\n\n  return (\n    <div className=\"left-pane-container\">\n      <LocationInput\n        setLocation={setLocation}\n      />\n      {apiData ? (\n        <>\n          <WeatherIcon iconId={apiData?.weather[0].icon} />\n          <span>{message}</span>\n        </>\n      ) : ''}\n    </div>\n  );\n};\n\nexport default LeftPane;\n","import React, { useState, useEffect } from 'react';\nimport LeftPane from './LeftPane';\nimport './styles/WeatherForecast.scss';\n\nconst WeatherForecast = () => {\n  const [location, setLocation] = useState({ lat: 0.00, lng: 0.00 });\n  const [apiData, setApiData] = useState<any>();\n  const apiUrl = `https://api.openweathermap.org/data/2.5/weather?lat=${location.lat.toPrecision(4)}&lon=${location.lng.toPrecision(4)}&appid=${process.env.REACT_APP_WEATHER_API_KEY}`;\n  const loadWeather = async () => {\n    if (location.lat || location.lng) {\n      await fetch(apiUrl).then((response) => {\n        if (!response.ok) {\n          console.log(`Did not get an ok. got: ${response.statusText}`);\n        }\n        return response.json();\n      })\n        .then((json) => setApiData(json))\n        .catch((error) => {\n          console.log(`Error getting weather data: ${error.message}`);\n        });\n    }\n  };\n  useEffect(() => {\n    loadWeather();\n  }, [apiUrl]);\n\n  return (\n    <div className=\"weather-forecast-container\">\n      <LeftPane apiData={apiData} location={location} setLocation={setLocation} />\n    </div>\n  );\n};\n\nexport default WeatherForecast;\n","import React from 'react';\nimport './styles/App.scss';\nimport WeatherForecast from './WeatherForecast';\n\nfunction App() {\n  return (\n    <div className=\"app-container\">\n      <WeatherForecast />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}