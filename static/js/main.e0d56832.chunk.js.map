{"version":3,"sources":["components/styles/colors.module.scss","components/LocationButton.tsx","components/LocationInput.tsx","components/WeatherIcon.tsx","components/HumidityDisplay.tsx","components/WindDisplay.tsx","components/DateTimeDisplay.tsx","components/WeatherCardBig.tsx","components/LeftPane.tsx","components/WeatherChart.tsx","components/WeatherCardSmall.tsx","components/RightPane.tsx","components/WeatherForecast.tsx","components/App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","LocationButton","props","setLocation","setValue","successCallback","position","a","coords","latitude","longitude","lat","lng","geocodeByLatLng","then","results","filter","result","types","filteredResults","formatted_address","split","splitName","navigator","geolocation","size","className","shape","icon","AimOutlined","onClick","getCurrentPosition","LocationInput","useState","value","handleLocation","event","console","log","geocodeByPlaceId","place_id","getLatLng","text","terms","selectProps","placeholder","noOptionsMessage","components","IndicatorSeparator","DropdownIndicator","styles","style","input","provided","width","classNamePrefix","label","onSelect","onChange","apiKey","process","debounce","WeatherIcon","iconId","iconClass","weatherClass","HumidityDisplay","humidityPercentage","getTypeClass","big","WindDisplay","windSpeed","toFixed","DateTimeDisplay","secondsOffset","dayjs","extend","utc","dateTime","setDateTime","useEffect","interval","setInterval","clearInterval","dateTimeText","utcOffset","format","WeatherCardBig","weather","timezoneOffset","temp","main","humidity","wind_speed","LeftPane","currentWeather","chartStyle","borderCapStyle","borderColor","colors","strongBlue","borderWidth","tension","hoverBorderWidth","hoverRadius","hoverBorderColor","white","pointBorderWidth","pointBackgroundColor","hoverBackgroundColor","WeatherChart","temperatures","selectedDay","chartRef","useRef","tooltipPlugin","Chart","registry","getPlugin","positioners","top","items","pos","average","currentItemValue","element","$context","raw","x","y","data","labels","datasets","fill","target","above","blue","below","options","events","scales","display","ticks","min","Math","max","plugins","legend","tooltip","backgroundColor","displayColors","bodyFontSize","bodyColor","bodyFont","weight","family","callbacks","title","context","dataIndex","elementNumber","current","setActiveElements","datasetIndex","index","update","ref","height","WeatherCardSmall","forecast","dayOffset","handleClick","type","add","RightPane","dailyWeather","setSelectedDay","nextFourDays","slice","map","day","handleCardClick","cardNumber","i","WeatherForecast","location","apiData","setApiData","apiUrl","toPrecision","loadWeather","fetch","response","ok","statusText","json","catch","error","message","timezone_offset","daily","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e0d56832.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"blue\":\"#addeff\",\"strongBlue\":\"#3d96e9\",\"white\":\"#fff\"};","import React from 'react';\nimport './styles/LocationButton.scss';\nimport { Button } from 'antd';\nimport { AimOutlined } from '@ant-design/icons';\nimport {\n  geocodeByLatLng,\n} from 'react-google-places-autocomplete';\n\nconst LocationButton = (props: any) => {\n  const { setLocation, setValue } = props;\n  async function successCallback(position: any) {\n    const [lat, lng] = [position.coords.latitude, position.coords.longitude];\n    const locationResult = await geocodeByLatLng(\n      { lat, lng },\n    )\n      .then((results) => results.filter((result) => result.types[0] === 'postal_code'))\n      .then((filteredResults) => filteredResults[0].formatted_address.split(', '))\n      .then((splitName) => `${splitName[0]}, ${splitName[1]}`);\n    setLocation({ lat, lng });\n    setValue('Current Location');\n  }\n\n  const getLocation = () => {\n    navigator.geolocation.getCurrentPosition(successCallback);\n  };\n\n  return (\n    navigator.geolocation\n      ? (\n        <Button\n          size=\"middle\"\n          className=\"location-btn\"\n          shape=\"circle\"\n          icon={<AimOutlined />}\n          onClick={getLocation}\n        />\n      )\n      : null\n  );\n};\n\nexport default LocationButton;\n","import React, { useState } from 'react';\nimport GooglePlacesAutocomplete, {\n  geocodeByPlaceId,\n  getLatLng,\n} from 'react-google-places-autocomplete';\nimport './styles/LocationInput.scss';\nimport LocationButton from './LocationButton';\n\nconst LocationInput = (props: any) => {\n  const { setLocation } = props;\n  const [value, setValue] = useState('Location');\n\n  const handleLocation = async (event: any) => {\n    console.log(event);\n    await geocodeByPlaceId(event.value.place_id)\n      .then((results) => getLatLng(results[0]))\n      .then(({ lat, lng }) => setLocation({ lat, lng }));\n\n    const text = event.value.terms[1]\n      ? `${event.value.terms[0].value}, ${event.value.terms[1].value}`\n      : `${event.value.terms[0].value}`;\n    setValue(text);\n  };\n\n  const style = {\n    input: (provided: any) => ({\n      ...provided,\n      width: '75%',\n    }),\n  };\n  const selectProps = {\n    placeholder: value,\n    noOptionsMessage: () => 'No Results Found',\n    components: {\n      IndicatorSeparator: () => null,\n      DropdownIndicator: () => null,\n    },\n    styles: { style },\n    className: 'location-select-input',\n    classNamePrefix: 'location-select-input',\n    label: value,\n    value,\n    onSelect: handleLocation,\n    onChange: handleLocation,\n  };\n\n  return (\n    <div className=\"location-container\">\n      <GooglePlacesAutocomplete\n        apiKey={process.env.REACT_APP_GOOGLE_API_KEY}\n        debounce={1500}\n        selectProps={{\n          ...selectProps,\n        }}\n      />\n      <LocationButton setValue={setValue} setLocation={setLocation} />\n    </div>\n  );\n};\n\nexport default LocationInput;\n","import React from 'react';\nimport './styles/WeatherIcons.scss';\n\nconst WeatherIcon = (props: any) => {\n  const { iconId, iconClass } = props;\n  const weatherClass = `owi owi-${iconId} ${iconClass}`;\n\n  return (\n    <i className={weatherClass} />\n  );\n};\n\nexport default WeatherIcon;\n","import React, { useState } from 'react';\n\nconst HumidityDisplay = (props: any) => {\n  const { humidityPercentage, big } = props;\n  const getTypeClass: string = (big ? 'big' : 'small');\n  return (\n    <div className={`humidity-container ${getTypeClass}`}>\n      <span className={`humidity-text ${getTypeClass}`}>Humidity</span>\n      <br />\n      <span className={`humidity-percentage ${getTypeClass}`}>{`${humidityPercentage}%`}</span>\n    </div>\n  );\n};\n\nexport default HumidityDisplay;\n","import React from 'react';\n\nconst WindDisplay = (props: any) => {\n  const { windSpeed } = props;\n  return (\n    <div className=\"windspeed-container \">\n      <span className=\"windspeed-text \">Wind Speed</span>\n      <br />\n      <span className=\"windspeed-value \">{`${windSpeed.toFixed(1)} km/h`}</span>\n    </div>\n  );\n};\n\nexport default WindDisplay;\n","import React, { useEffect, useState } from 'react';\nimport dayjs from 'dayjs';\nimport utc from 'dayjs/plugin/utc';\nimport './styles/LeftPane.scss';\n\nconst DateTimeDisplay = (props: any) => {\n  const { secondsOffset } = props;\n  dayjs.extend(utc);\n  const [dateTime, setDateTime] = useState(dayjs.utc());\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setDateTime(dayjs.utc());\n    }, 1000);\n    return () => clearInterval(interval);\n  }, []);\n\n  const dateTimeText = `${dateTime.utcOffset(secondsOffset / 60).format('hh:mm a, dddd, MMM DD, YYYY')}`;\n\n  return (\n    <span className=\"date-time-text date-time-container\">\n      {dateTimeText}\n    </span>\n  );\n};\n\nexport default DateTimeDisplay;\n","import React from 'react';\nimport WeatherIcon from './WeatherIcon';\nimport HumidityDisplay from './HumidityDisplay';\nimport WindDisplay from './WindDisplay';\nimport DateTimeDisplay from './DateTimeDisplay';\nimport './styles/WeatherCardBig.scss';\n\nconst WeatherCardBig = (props: any) => {\n  const {\n    weather,\n    timezoneOffset,\n  } = props;\n\n  return (\n    <div className=\"weather-card-big\">\n      <DateTimeDisplay className=\"date-time-container\" secondsOffset={timezoneOffset} />\n      <WeatherIcon iconClass=\"wi-main\" iconId={weather.weather[0].icon} />\n      <span className=\"temp-display\">\n        {`${(weather.temp - 273.15).toFixed(1)} °C`}\n      </span>\n      <span className=\"current-weather-display\">\n        {weather.weather[0].main}\n      </span>\n      <HumidityDisplay humidityPercentage={weather.humidity} />\n      <WindDisplay windSpeed={weather.wind_speed * 3.6} />\n    </div>\n  );\n};\n\nexport default WeatherCardBig;\n","import React from 'react';\nimport LocationInput from './LocationInput';\nimport './styles/LeftPane.scss';\nimport WeatherCardBig from './WeatherCardBig';\n\nconst LeftPane = (props: any) => {\n  const {\n    setLocation, currentWeather, timezoneOffset,\n  } = props;\n\n  return (\n    <div className=\"left-pane-container\">\n      <LocationInput\n        setLocation={setLocation}\n      />\n      {currentWeather ? (\n        <>\n          <WeatherCardBig weather={currentWeather} timezoneOffset={timezoneOffset} />\n        </>\n      ) : ''}\n    </div>\n  );\n};\n\nexport default LeftPane;\n","import React, { useEffect, useRef } from 'react';\nimport { Line, Chart } from 'react-chartjs-2';\nimport colors from './styles/colors.module.scss';\n\nconst chartStyle = {\n  borderCapStyle: 'round',\n  borderColor: colors.strongBlue,\n  borderWidth: 2,\n  tension: 0.4,\n  hoverBorderWidth: 3,\n  hoverRadius: 6,\n  hoverBorderColor: colors.white,\n  pointBorderWidth: 0,\n  pointBackgroundColor: 'rgba(0, 0, 0, 0)',\n  hoverBackgroundColor: colors.strongBlue,\n};\n\nconst WeatherChart = (props: any) => {\n  const { temperatures, selectedDay } = props;\n  const chartRef = useRef<any>(null);\n\n  const tooltipPlugin = Chart.registry.getPlugin('tooltip') as any;\n  tooltipPlugin.positioners.top = (items: any) => {\n    const pos = tooltipPlugin.positioners.average(items);\n    const currentItemValue = items[0].element.$context.raw;\n\n    if (pos === false) {\n      return false;\n    }\n\n    return {\n      x: pos.x,\n      y: currentItemValue > 0 ? pos.y - 30 : pos.y + 30,\n    };\n  };\n  const data = {\n    labels: ['Day 1', 'Day 2', 'Day 3', 'Day 4'],\n    datasets: [{\n      data: temperatures,\n      fill: {\n        target: 'origin',\n        above: colors.blue,\n        below: colors.blue,\n      },\n    }],\n  };\n\n  const options = {\n    ...chartStyle,\n    events: [],\n    scales: {\n      y: {\n        display: false,\n        ticks: {\n          display: false,\n        },\n        min: temperatures ? Math.min(...temperatures) - 10 : 0,\n        max: temperatures ? Math.max(...temperatures) + 10 : 50,\n      },\n      x: {\n        ticks: {\n          display: false,\n        },\n        display: false,\n      },\n    },\n    plugins: {\n      legend: {\n        display: false,\n      },\n      tooltip: {\n        position: 'top' as 'average',\n        backgroundColor: 'transparent',\n        displayColors: false,\n        bodyFontSize: 32,\n        bodyColor: colors.strongBlue,\n        bodyFont: {\n          weight: 'bold',\n          size: 22,\n          family: 'Open Sans, sans-serif',\n        },\n        callbacks: {\n          title: () => '',\n          label(context: any) {\n            return `${temperatures[context.dataIndex].toFixed(1)} ˚ᶜ`;\n          },\n        },\n      },\n    },\n  };\n\n  const highlightElement = (elementNumber: number) => {\n    if (chartRef && chartRef.current && temperatures) {\n      chartRef.current.setActiveElements([{ datasetIndex: 0, index: elementNumber }]);\n      chartRef.current.tooltip.setActiveElements([{ datasetIndex: 0, index: elementNumber }]);\n      chartRef.current.tooltip.update();\n    }\n  };\n  useEffect(() => {\n    highlightElement(selectedDay);\n  }, [selectedDay, temperatures]);\n\n  return (\n    <div className=\"weather-chart-container\">\n      <p className=\"temperature-chart-title\">Average Temperature</p>\n      <Line data={data} ref={chartRef} options={options} height=\"120px\" />\n    </div>\n  );\n};\n\nexport default WeatherChart;\n","import React from 'react';\nimport dayjs from 'dayjs';\nimport WeatherIcon from './WeatherIcon';\nimport HumidityDisplay from './HumidityDisplay';\nimport './styles/WeatherCardSmall.scss';\n\nconst WeatherCardSmall = (props: any) => {\n  const { forecast, dayOffset, handleClick } = props;\n  return (\n    <button type=\"button\" className=\"weather-card-small\" onClick={() => handleClick(dayOffset)}>\n      <span className=\"weather-card-small-day\">\n        {dayOffset === 0 ? 'Today' : `${dayjs().add(dayOffset, 'day').format('MMM DD')}`}\n      </span>\n      <WeatherIcon iconId={forecast.weather[0].icon} />\n      <HumidityDisplay humidityPercentage={forecast.humidity} />\n    </button>\n  );\n};\n\nexport default WeatherCardSmall;\n","import React, { useState } from 'react';\nimport WeatherChart from './WeatherChart';\nimport './styles/RightPane.scss';\nimport WeatherCardSmall from './WeatherCardSmall';\n\nconst RightPane = (props: any) => {\n  const { dailyWeather } = props;\n  const [selectedDay, setSelectedDay] = useState(0);\n  const nextFourDays = dailyWeather?.slice(0, 4);\n  const temperatures = nextFourDays?.map((day: any) => day.temp.day - 273.15);\n\n  const handleCardClick = (cardNumber: number) => {\n    setSelectedDay(cardNumber);\n  };\n  return (\n    <div className=\"right-pane-container\">\n      <WeatherChart temperatures={temperatures} selectedDay={selectedDay} />\n      <div className=\"small-cards-container\">\n        {nextFourDays?.map(\n          (forecast: any, i: number) => (\n            <WeatherCardSmall\n              forecast={forecast}\n              dayOffset={i}\n              handleClick={handleCardClick}\n            />\n          ),\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default RightPane;\n","import React, { useState, useEffect } from 'react';\nimport LeftPane from './LeftPane';\nimport RightPane from './RightPane';\nimport './styles/WeatherForecast.scss';\n\nconst WeatherForecast = () => {\n  const [location, setLocation] = useState({ lat: 0.00, lng: 0.00 });\n  const [apiData, setApiData] = useState<any>();\n  const apiUrl = `https://api.openweathermap.org/data/2.5/onecall?lat=${location.lat.toPrecision(4)}&lon=${location.lng.toPrecision(4)}&exclude=minutely,hourly,alerts&appid=${process.env.REACT_APP_WEATHER_API_KEY}`;\n  const loadWeather = async () => {\n    if (location.lat || location.lng) {\n      await fetch(apiUrl).then((response) => {\n        if (!response.ok) {\n          console.log(`Did not get an ok. got: ${response.statusText}`);\n        }\n        return response.json();\n      })\n        .then((json) => setApiData(json))\n        .catch((error) => {\n          console.log(`Error getting weather data: ${error.message}`);\n        });\n    }\n  };\n  useEffect(() => {\n    loadWeather();\n  }, [apiUrl]);\n\n  return (\n    <div className=\"weather-forecast-container\">\n      <LeftPane\n        currentWeather={apiData?.current}\n        timezoneOffset={apiData?.timezone_offset}\n        location={location}\n        setLocation={setLocation}\n      />\n      <RightPane\n        dailyWeather={apiData?.daily}\n      />\n    </div>\n  );\n};\n\nexport default WeatherForecast;\n","import React from 'react';\nimport './styles/App.scss';\nimport WeatherForecast from './WeatherForecast';\n\nfunction App() {\n  return (\n    <div className=\"app-container\">\n      <WeatherForecast />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}